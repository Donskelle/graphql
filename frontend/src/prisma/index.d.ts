// Code generated by Prisma (prisma@1.18.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  jamSession: (where?: JamSessionWhereInput) => Promise<boolean>;
  playlist: (where?: PlaylistWhereInput) => Promise<boolean>;
  song: (where?: SongWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  jamSession: (where: JamSessionWhereUniqueInput) => JamSession;
  jamSessions: (
    args?: {
      where?: JamSessionWhereInput;
      orderBy?: JamSessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<JamSessionNode>;
  jamSessionsConnection: (
    args?: {
      where?: JamSessionWhereInput;
      orderBy?: JamSessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => JamSessionConnection;
  playlist: (where: PlaylistWhereUniqueInput) => Playlist;
  playlists: (
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PlaylistNode>;
  playlistsConnection: (
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlaylistConnection;
  song: (where: SongWhereUniqueInput) => Song;
  songs: (
    args?: {
      where?: SongWhereInput;
      orderBy?: SongOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<SongNode>;
  songsConnection: (
    args?: {
      where?: SongWhereInput;
      orderBy?: SongOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SongConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createJamSession: (data: JamSessionCreateInput) => JamSession;
  updateJamSession: (
    args: { data: JamSessionUpdateInput; where: JamSessionWhereUniqueInput }
  ) => JamSession;
  updateManyJamSessions: (
    args: { data: JamSessionUpdateInput; where?: JamSessionWhereInput }
  ) => BatchPayload;
  upsertJamSession: (
    args: {
      where: JamSessionWhereUniqueInput;
      create: JamSessionCreateInput;
      update: JamSessionUpdateInput;
    }
  ) => JamSession;
  deleteJamSession: (where: JamSessionWhereUniqueInput) => JamSession;
  deleteManyJamSessions: (where?: JamSessionWhereInput) => BatchPayload;
  createPlaylist: (data: PlaylistCreateInput) => Playlist;
  updatePlaylist: (
    args: { data: PlaylistUpdateInput; where: PlaylistWhereUniqueInput }
  ) => Playlist;
  updateManyPlaylists: (
    args: { data: PlaylistUpdateInput; where?: PlaylistWhereInput }
  ) => BatchPayload;
  upsertPlaylist: (
    args: {
      where: PlaylistWhereUniqueInput;
      create: PlaylistCreateInput;
      update: PlaylistUpdateInput;
    }
  ) => Playlist;
  deletePlaylist: (where: PlaylistWhereUniqueInput) => Playlist;
  deleteManyPlaylists: (where?: PlaylistWhereInput) => BatchPayload;
  createSong: (data: SongCreateInput) => Song;
  updateSong: (
    args: { data: SongUpdateInput; where: SongWhereUniqueInput }
  ) => Song;
  updateManySongs: (
    args: { data: SongUpdateInput; where?: SongWhereInput }
  ) => BatchPayload;
  upsertSong: (
    args: {
      where: SongWhereUniqueInput;
      create: SongCreateInput;
      update: SongUpdateInput;
    }
  ) => Song;
  deleteSong: (where: SongWhereUniqueInput) => Song;
  deleteManySongs: (where?: SongWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  jamSession: (
    where?: JamSessionSubscriptionWhereInput
  ) => JamSessionSubscriptionPayloadSubscription;
  playlist: (
    where?: PlaylistSubscriptionWhereInput
  ) => PlaylistSubscriptionPayloadSubscription;
  song: (
    where?: SongSubscriptionWhereInput
  ) => SongSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type jamStatus = "PAUSE" | "START" | "STOP";

export type PlaylistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SongOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "source_ASC"
  | "source_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "image_ASC"
  | "image_DESC"
  | "name_ASC"
  | "name_DESC"
  | "birth_ASC"
  | "birth_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type JamSessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "currentTime_ASC"
  | "currentTime_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserCreateManyWithoutJamInput {
  create?: UserCreateWithoutJamInput[] | UserCreateWithoutJamInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export type JamSessionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface JamSessionUpdateInput {
  playlist?: PlaylistUpdateOneInput;
  onlineUser?: UserUpdateManyWithoutJamInput;
  currentSong?: SongUpdateOneInput;
  currentTime?: Int;
  status?: jamStatus;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  birth?: DateTimeInput;
  birth_not?: DateTimeInput;
  birth_in?: DateTimeInput[] | DateTimeInput;
  birth_not_in?: DateTimeInput[] | DateTimeInput;
  birth_lt?: DateTimeInput;
  birth_lte?: DateTimeInput;
  birth_gt?: DateTimeInput;
  birth_gte?: DateTimeInput;
  playlists_every?: PlaylistWhereInput;
  playlists_some?: PlaylistWhereInput;
  playlists_none?: PlaylistWhereInput;
  jam?: JamSessionWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface PlaylistUpdateOneInput {
  create?: PlaylistCreateInput;
  update?: PlaylistUpdateDataInput;
  upsert?: PlaylistUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PlaylistWhereUniqueInput;
}

export interface SongWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  icon?: String;
  icon_not?: String;
  icon_in?: String[] | String;
  icon_not_in?: String[] | String;
  icon_lt?: String;
  icon_lte?: String;
  icon_gt?: String;
  icon_gte?: String;
  icon_contains?: String;
  icon_not_contains?: String;
  icon_starts_with?: String;
  icon_not_starts_with?: String;
  icon_ends_with?: String;
  icon_not_ends_with?: String;
  AND?: SongWhereInput[] | SongWhereInput;
  OR?: SongWhereInput[] | SongWhereInput;
  NOT?: SongWhereInput[] | SongWhereInput;
}

export interface PlaylistUpdateDataInput {
  name?: String;
  owner?: UserUpdateOneRequiredWithoutPlaylistsInput;
  songs?: SongUpdateManyInput;
}

export interface PlaylistWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  owner?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  songs_every?: SongWhereInput;
  songs_some?: SongWhereInput;
  songs_none?: SongWhereInput;
  AND?: PlaylistWhereInput[] | PlaylistWhereInput;
  OR?: PlaylistWhereInput[] | PlaylistWhereInput;
  NOT?: PlaylistWhereInput[] | PlaylistWhereInput;
}

export interface PlaylistCreateInput {
  name: String;
  owner: UserCreateOneWithoutPlaylistsInput;
  songs?: SongCreateManyInput;
}

export interface UserUpsertWithoutPlaylistsInput {
  update: UserUpdateWithoutPlaylistsDataInput;
  create: UserCreateWithoutPlaylistsInput;
}

export interface UserCreateOneWithoutPlaylistsInput {
  create?: UserCreateWithoutPlaylistsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutPlaylistsInput {
  create?: UserCreateWithoutPlaylistsInput;
  update?: UserUpdateWithoutPlaylistsDataInput;
  upsert?: UserUpsertWithoutPlaylistsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutPlaylistsInput {
  email: String;
  image?: String;
  name: String;
  birth: DateTimeInput;
  jam?: JamSessionCreateOneWithoutOnlineUserInput;
}

export interface SongSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SongWhereInput;
  AND?: SongSubscriptionWhereInput[] | SongSubscriptionWhereInput;
  OR?: SongSubscriptionWhereInput[] | SongSubscriptionWhereInput;
  NOT?: SongSubscriptionWhereInput[] | SongSubscriptionWhereInput;
}

export interface JamSessionCreateOneWithoutOnlineUserInput {
  create?: JamSessionCreateWithoutOnlineUserInput;
  connect?: JamSessionWhereUniqueInput;
}

export interface JamSessionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: JamSessionWhereInput;
  AND?: JamSessionSubscriptionWhereInput[] | JamSessionSubscriptionWhereInput;
  OR?: JamSessionSubscriptionWhereInput[] | JamSessionSubscriptionWhereInput;
  NOT?: JamSessionSubscriptionWhereInput[] | JamSessionSubscriptionWhereInput;
}

export interface JamSessionCreateWithoutOnlineUserInput {
  playlist?: PlaylistCreateOneInput;
  currentSong?: SongCreateOneInput;
  currentTime?: Int;
  status?: jamStatus;
}

export interface UserCreateInput {
  email: String;
  image?: String;
  name: String;
  birth: DateTimeInput;
  playlists?: PlaylistCreateManyWithoutOwnerInput;
  jam?: JamSessionCreateOneWithoutOnlineUserInput;
}

export interface SongCreateOneInput {
  create?: SongCreateInput;
  connect?: SongWhereUniqueInput;
}

export type PlaylistWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SongCreateInput {
  name: String;
  source: String;
  icon?: String;
}

export interface UserUpsertWithWhereUniqueWithoutJamInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutJamDataInput;
  create: UserCreateWithoutJamInput;
}

export interface SongCreateManyInput {
  create?: SongCreateInput[] | SongCreateInput;
  connect?: SongWhereUniqueInput[] | SongWhereUniqueInput;
}

export type SongWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PlaylistUpsertNestedInput {
  update: PlaylistUpdateDataInput;
  create: PlaylistCreateInput;
}

export interface PlaylistUpdateWithWhereUniqueWithoutOwnerInput {
  where: PlaylistWhereUniqueInput;
  data: PlaylistUpdateWithoutOwnerDataInput;
}

export interface UserCreateWithoutJamInput {
  email: String;
  image?: String;
  name: String;
  birth: DateTimeInput;
  playlists?: PlaylistCreateManyWithoutOwnerInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface PlaylistCreateManyWithoutOwnerInput {
  create?: PlaylistCreateWithoutOwnerInput[] | PlaylistCreateWithoutOwnerInput;
  connect?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
}

export interface UserUpdateWithWhereUniqueWithoutJamInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutJamDataInput;
}

export interface PlaylistCreateWithoutOwnerInput {
  name: String;
  songs?: SongCreateManyInput;
}

export interface PlaylistCreateOneInput {
  create?: PlaylistCreateInput;
  connect?: PlaylistWhereUniqueInput;
}

export interface JamSessionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  playlist?: PlaylistWhereInput;
  onlineUser_every?: UserWhereInput;
  onlineUser_some?: UserWhereInput;
  onlineUser_none?: UserWhereInput;
  currentSong?: SongWhereInput;
  currentTime?: Int;
  currentTime_not?: Int;
  currentTime_in?: Int[] | Int;
  currentTime_not_in?: Int[] | Int;
  currentTime_lt?: Int;
  currentTime_lte?: Int;
  currentTime_gt?: Int;
  currentTime_gte?: Int;
  status?: jamStatus;
  status_not?: jamStatus;
  status_in?: jamStatus[] | jamStatus;
  status_not_in?: jamStatus[] | jamStatus;
  AND?: JamSessionWhereInput[] | JamSessionWhereInput;
  OR?: JamSessionWhereInput[] | JamSessionWhereInput;
  NOT?: JamSessionWhereInput[] | JamSessionWhereInput;
}

export interface PlaylistSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlaylistWhereInput;
  AND?: PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput;
  OR?: PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput;
  NOT?: PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput;
}

export interface SongUpsertWithWhereUniqueNestedInput {
  where: SongWhereUniqueInput;
  update: SongUpdateDataInput;
  create: SongCreateInput;
}

export interface SongUpdateInput {
  name?: String;
  source?: String;
  icon?: String;
}

export interface SongUpdateWithWhereUniqueNestedInput {
  where: SongWhereUniqueInput;
  data: SongUpdateDataInput;
}

export interface PlaylistUpsertWithWhereUniqueWithoutOwnerInput {
  where: PlaylistWhereUniqueInput;
  update: PlaylistUpdateWithoutOwnerDataInput;
  create: PlaylistCreateWithoutOwnerInput;
}

export interface SongUpdateManyInput {
  create?: SongCreateInput[] | SongCreateInput;
  update?:
    | SongUpdateWithWhereUniqueNestedInput[]
    | SongUpdateWithWhereUniqueNestedInput;
  upsert?:
    | SongUpsertWithWhereUniqueNestedInput[]
    | SongUpsertWithWhereUniqueNestedInput;
  delete?: SongWhereUniqueInput[] | SongWhereUniqueInput;
  connect?: SongWhereUniqueInput[] | SongWhereUniqueInput;
  disconnect?: SongWhereUniqueInput[] | SongWhereUniqueInput;
}

export interface PlaylistUpdateManyWithoutOwnerInput {
  create?: PlaylistCreateWithoutOwnerInput[] | PlaylistCreateWithoutOwnerInput;
  delete?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  connect?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  disconnect?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  update?:
    | PlaylistUpdateWithWhereUniqueWithoutOwnerInput[]
    | PlaylistUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | PlaylistUpsertWithWhereUniqueWithoutOwnerInput[]
    | PlaylistUpsertWithWhereUniqueWithoutOwnerInput;
}

export interface UserUpdateWithoutPlaylistsDataInput {
  email?: String;
  image?: String;
  name?: String;
  birth?: DateTimeInput;
  jam?: JamSessionUpdateOneWithoutOnlineUserInput;
}

export interface UserUpdateManyWithoutJamInput {
  create?: UserCreateWithoutJamInput[] | UserCreateWithoutJamInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutJamInput[]
    | UserUpdateWithWhereUniqueWithoutJamInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutJamInput[]
    | UserUpsertWithWhereUniqueWithoutJamInput;
}

export interface JamSessionUpdateOneWithoutOnlineUserInput {
  create?: JamSessionCreateWithoutOnlineUserInput;
  update?: JamSessionUpdateWithoutOnlineUserDataInput;
  upsert?: JamSessionUpsertWithoutOnlineUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: JamSessionWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface JamSessionUpdateWithoutOnlineUserDataInput {
  playlist?: PlaylistUpdateOneInput;
  currentSong?: SongUpdateOneInput;
  currentTime?: Int;
  status?: jamStatus;
}

export interface PlaylistUpdateInput {
  name?: String;
  owner?: UserUpdateOneRequiredWithoutPlaylistsInput;
  songs?: SongUpdateManyInput;
}

export interface JamSessionUpsertWithoutOnlineUserInput {
  update: JamSessionUpdateWithoutOnlineUserDataInput;
  create: JamSessionCreateWithoutOnlineUserInput;
}

export interface SongUpsertNestedInput {
  update: SongUpdateDataInput;
  create: SongCreateInput;
}

export interface SongUpdateDataInput {
  name?: String;
  source?: String;
  icon?: String;
}

export interface SongUpdateOneInput {
  create?: SongCreateInput;
  update?: SongUpdateDataInput;
  upsert?: SongUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: SongWhereUniqueInput;
}

export interface PlaylistUpdateWithoutOwnerDataInput {
  name?: String;
  songs?: SongUpdateManyInput;
}

export interface UserUpdateInput {
  email?: String;
  image?: String;
  name?: String;
  birth?: DateTimeInput;
  playlists?: PlaylistUpdateManyWithoutOwnerInput;
  jam?: JamSessionUpdateOneWithoutOnlineUserInput;
}

export interface JamSessionCreateInput {
  playlist?: PlaylistCreateOneInput;
  onlineUser?: UserCreateManyWithoutJamInput;
  currentSong?: SongCreateOneInput;
  currentTime?: Int;
  status?: jamStatus;
}

export interface UserUpdateWithoutJamDataInput {
  email?: String;
  image?: String;
  name?: String;
  birth?: DateTimeInput;
  playlists?: PlaylistUpdateManyWithoutOwnerInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  email: String;
  image?: String;
  name: String;
  birth: DateTimeOutput;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  birth: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  birth: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateJamSessionNode {
  count: Int;
}

export interface AggregateJamSession
  extends Promise<AggregateJamSessionNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJamSessionSubscription
  extends Promise<AsyncIterator<AggregateJamSessionNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserNode {
  id: ID_Output;
  email: String;
  image?: String;
  name: String;
  birth: DateTimeOutput;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  birth: () => Promise<DateTimeOutput>;
  playlists: <T = FragmentableArray<PlaylistNode>>(
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  jam: <T = JamSession>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  birth: () => Promise<AsyncIterator<DateTimeOutput>>;
  playlists: <T = Promise<AsyncIterator<PlaylistSubscription>>>(
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  jam: <T = JamSessionSubscription>() => T;
}

export interface JamSessionEdgeNode {
  cursor: String;
}

export interface JamSessionEdge
  extends Promise<JamSessionEdgeNode>,
    Fragmentable {
  node: <T = JamSession>() => T;
  cursor: () => Promise<String>;
}

export interface JamSessionEdgeSubscription
  extends Promise<AsyncIterator<JamSessionEdgeNode>>,
    Fragmentable {
  node: <T = JamSessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SongNode {
  id: ID_Output;
  name: String;
  source: String;
  icon?: String;
}

export interface Song extends Promise<SongNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  source: () => Promise<String>;
  icon: () => Promise<String>;
}

export interface SongSubscription
  extends Promise<AsyncIterator<SongNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
}

export interface SongPreviousValuesNode {
  id: ID_Output;
  name: String;
  source: String;
  icon?: String;
}

export interface SongPreviousValues
  extends Promise<SongPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  source: () => Promise<String>;
  icon: () => Promise<String>;
}

export interface SongPreviousValuesSubscription
  extends Promise<AsyncIterator<SongPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
}

export interface PlaylistNode {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Playlist extends Promise<PlaylistNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  owner: <T = User>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  songs: <T = FragmentableArray<SongNode>>(
    args?: {
      where?: SongWhereInput;
      orderBy?: SongOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PlaylistSubscription
  extends Promise<AsyncIterator<PlaylistNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  songs: <T = Promise<AsyncIterator<SongSubscription>>>(
    args?: {
      where?: SongWhereInput;
      orderBy?: SongOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SongSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SongSubscriptionPayload
  extends Promise<SongSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Song>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SongPreviousValues>() => T;
}

export interface SongSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SongSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SongSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SongPreviousValuesSubscription>() => T;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSongNode {
  count: Int;
}

export interface AggregateSong
  extends Promise<AggregateSongNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSongSubscription
  extends Promise<AsyncIterator<AggregateSongNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SongConnectionNode {}

export interface SongConnection
  extends Promise<SongConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<SongEdgeNode>>() => T;
  aggregate: <T = AggregateSong>() => T;
}

export interface SongConnectionSubscription
  extends Promise<AsyncIterator<SongConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SongEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSongSubscription>() => T;
}

export interface JamSessionNode {
  id: ID_Output;
  currentTime?: Int;
  status?: jamStatus;
}

export interface JamSession extends Promise<JamSessionNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  playlist: <T = Playlist>() => T;
  onlineUser: <T = FragmentableArray<UserNode>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  currentSong: <T = Song>() => T;
  currentTime: () => Promise<Int>;
  status: () => Promise<jamStatus>;
}

export interface JamSessionSubscription
  extends Promise<AsyncIterator<JamSessionNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  playlist: <T = PlaylistSubscription>() => T;
  onlineUser: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  currentSong: <T = SongSubscription>() => T;
  currentTime: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<jamStatus>>;
}

export interface PlaylistEdgeNode {
  cursor: String;
}

export interface PlaylistEdge extends Promise<PlaylistEdgeNode>, Fragmentable {
  node: <T = Playlist>() => T;
  cursor: () => Promise<String>;
}

export interface PlaylistEdgeSubscription
  extends Promise<AsyncIterator<PlaylistEdgeNode>>,
    Fragmentable {
  node: <T = PlaylistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface JamSessionSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface JamSessionSubscriptionPayload
  extends Promise<JamSessionSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JamSession>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JamSessionPreviousValues>() => T;
}

export interface JamSessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JamSessionSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JamSessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JamSessionPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PlaylistPreviousValuesNode {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PlaylistPreviousValues
  extends Promise<PlaylistPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PlaylistPreviousValuesSubscription
  extends Promise<AsyncIterator<PlaylistPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PlaylistSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PlaylistSubscriptionPayload
  extends Promise<PlaylistSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Playlist>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlaylistPreviousValues>() => T;
}

export interface PlaylistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaylistSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaylistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlaylistPreviousValuesSubscription>() => T;
}

export interface JamSessionConnectionNode {}

export interface JamSessionConnection
  extends Promise<JamSessionConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<JamSessionEdgeNode>>() => T;
  aggregate: <T = AggregateJamSession>() => T;
}

export interface JamSessionConnectionSubscription
  extends Promise<AsyncIterator<JamSessionConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<JamSessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateJamSessionSubscription>() => T;
}

export interface JamSessionPreviousValuesNode {
  id: ID_Output;
  currentTime?: Int;
  status?: jamStatus;
}

export interface JamSessionPreviousValues
  extends Promise<JamSessionPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  currentTime: () => Promise<Int>;
  status: () => Promise<jamStatus>;
}

export interface JamSessionPreviousValuesSubscription
  extends Promise<AsyncIterator<JamSessionPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  currentTime: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<jamStatus>>;
}

export interface SongEdgeNode {
  cursor: String;
}

export interface SongEdge extends Promise<SongEdgeNode>, Fragmentable {
  node: <T = Song>() => T;
  cursor: () => Promise<String>;
}

export interface SongEdgeSubscription
  extends Promise<AsyncIterator<SongEdgeNode>>,
    Fragmentable {
  node: <T = SongSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PlaylistConnectionNode {}

export interface PlaylistConnection
  extends Promise<PlaylistConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<PlaylistEdgeNode>>() => T;
  aggregate: <T = AggregatePlaylist>() => T;
}

export interface PlaylistConnectionSubscription
  extends Promise<AsyncIterator<PlaylistConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaylistEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaylistSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregatePlaylistNode {
  count: Int;
}

export interface AggregatePlaylist
  extends Promise<AggregatePlaylistNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaylistSubscription
  extends Promise<AsyncIterator<AggregatePlaylistNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
