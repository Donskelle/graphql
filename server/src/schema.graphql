# import Post from "./generated/prisma.graphql"

type Query {
  feed(orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]!
  drafts: [Post!]!
  post(id: ID!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]!
  me: User
  songs(where: SongWhereInput, orderBy: SongOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Song!]!
  users(filter: String, skip: Int, first: Int, orderBy: UserOrderByInput, last: Int): [User!]!
  playlists(where: PlaylistWhereInput, orderBy: PlaylistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Playlist!]!
  playlist(id: ID!): Playlist
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createDraft(title: String!, text: String!): Post!
  publish(id: ID!): Post!
  deletePost(id: ID!): Post!

  createPlaylist(title: String!): Playlist
  createSong(url: String!): Song
  updatePlaylist(data: PlaylistUpdateInput!, where: PlaylistWhereUniqueInput!): Playlist
  updateSong(data: SongUpdateInput!, where: SongWhereUniqueInput!): Song
  deletePlaylist(id: ID!): Playlist
  deleteSong(where: SongWhereUniqueInput!): Song

  addSongToPlaylist(id: ID!, songId: ID!):Playlist
}

type Subscription {
  feedSubscription: PostSubscriptionPayload!
  playlistSubscription(where: PlaylistSubscriptionWhereInput): PlaylistSubscriptionPayload
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  posts(filter: String, skip: Int, first: Int, orderBy: PostOrderByInput): [Post!]!
}